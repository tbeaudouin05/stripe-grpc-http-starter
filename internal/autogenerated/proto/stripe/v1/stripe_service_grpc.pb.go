// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: stripe/v1/stripe_service.proto

package stripev1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StripeService_CancelSubscription_FullMethodName         = "/stripe.v1.StripeService/CancelSubscription"
	StripeService_VerifySubscriptionValidity_FullMethodName = "/stripe.v1.StripeService/VerifySubscriptionValidity"
	StripeService_HandleWebhook_FullMethodName              = "/stripe.v1.StripeService/HandleWebhook"
	StripeService_AddSpendingUnits_FullMethodName           = "/stripe.v1.StripeService/AddSpendingUnits"
)

// StripeServiceClient is the client API for StripeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StripeService exposes subscription operations.
type StripeServiceClient interface {
	// Cancels a subscription by Stripe subscription id.
	CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error)
	// Verifies a user's subscription validity by external user id.
	VerifySubscriptionValidity(ctx context.Context, in *VerifySubscriptionValidityRequest, opts ...grpc.CallOption) (*VerifySubscriptionValidityResponse, error)
	// Processes a Stripe webhook event.
	// Uses google.api.HttpBody to receive the raw payload via grpc-gateway.
	HandleWebhook(ctx context.Context, in *httpbody.HttpBody, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Adds spending units in batch.
	AddSpendingUnits(ctx context.Context, in *AddSpendingUnitsRequest, opts ...grpc.CallOption) (*AddSpendingUnitsResponse, error)
}

type stripeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStripeServiceClient(cc grpc.ClientConnInterface) StripeServiceClient {
	return &stripeServiceClient{cc}
}

func (c *stripeServiceClient) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelSubscriptionResponse)
	err := c.cc.Invoke(ctx, StripeService_CancelSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stripeServiceClient) VerifySubscriptionValidity(ctx context.Context, in *VerifySubscriptionValidityRequest, opts ...grpc.CallOption) (*VerifySubscriptionValidityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifySubscriptionValidityResponse)
	err := c.cc.Invoke(ctx, StripeService_VerifySubscriptionValidity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stripeServiceClient) HandleWebhook(ctx context.Context, in *httpbody.HttpBody, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StripeService_HandleWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stripeServiceClient) AddSpendingUnits(ctx context.Context, in *AddSpendingUnitsRequest, opts ...grpc.CallOption) (*AddSpendingUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSpendingUnitsResponse)
	err := c.cc.Invoke(ctx, StripeService_AddSpendingUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StripeServiceServer is the server API for StripeService service.
// All implementations must embed UnimplementedStripeServiceServer
// for forward compatibility.
//
// StripeService exposes subscription operations.
type StripeServiceServer interface {
	// Cancels a subscription by Stripe subscription id.
	CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error)
	// Verifies a user's subscription validity by external user id.
	VerifySubscriptionValidity(context.Context, *VerifySubscriptionValidityRequest) (*VerifySubscriptionValidityResponse, error)
	// Processes a Stripe webhook event.
	// Uses google.api.HttpBody to receive the raw payload via grpc-gateway.
	HandleWebhook(context.Context, *httpbody.HttpBody) (*emptypb.Empty, error)
	// Adds spending units in batch.
	AddSpendingUnits(context.Context, *AddSpendingUnitsRequest) (*AddSpendingUnitsResponse, error)
	mustEmbedUnimplementedStripeServiceServer()
}

// UnimplementedStripeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStripeServiceServer struct{}

func (UnimplementedStripeServiceServer) CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedStripeServiceServer) VerifySubscriptionValidity(context.Context, *VerifySubscriptionValidityRequest) (*VerifySubscriptionValidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySubscriptionValidity not implemented")
}
func (UnimplementedStripeServiceServer) HandleWebhook(context.Context, *httpbody.HttpBody) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleWebhook not implemented")
}
func (UnimplementedStripeServiceServer) AddSpendingUnits(context.Context, *AddSpendingUnitsRequest) (*AddSpendingUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpendingUnits not implemented")
}
func (UnimplementedStripeServiceServer) mustEmbedUnimplementedStripeServiceServer() {}
func (UnimplementedStripeServiceServer) testEmbeddedByValue()                       {}

// UnsafeStripeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StripeServiceServer will
// result in compilation errors.
type UnsafeStripeServiceServer interface {
	mustEmbedUnimplementedStripeServiceServer()
}

func RegisterStripeServiceServer(s grpc.ServiceRegistrar, srv StripeServiceServer) {
	// If the following call pancis, it indicates UnimplementedStripeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StripeService_ServiceDesc, srv)
}

func _StripeService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StripeServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StripeService_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StripeServiceServer).CancelSubscription(ctx, req.(*CancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StripeService_VerifySubscriptionValidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySubscriptionValidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StripeServiceServer).VerifySubscriptionValidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StripeService_VerifySubscriptionValidity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StripeServiceServer).VerifySubscriptionValidity(ctx, req.(*VerifySubscriptionValidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StripeService_HandleWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(httpbody.HttpBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StripeServiceServer).HandleWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StripeService_HandleWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StripeServiceServer).HandleWebhook(ctx, req.(*httpbody.HttpBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _StripeService_AddSpendingUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSpendingUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StripeServiceServer).AddSpendingUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StripeService_AddSpendingUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StripeServiceServer).AddSpendingUnits(ctx, req.(*AddSpendingUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StripeService_ServiceDesc is the grpc.ServiceDesc for StripeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StripeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stripe.v1.StripeService",
	HandlerType: (*StripeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelSubscription",
			Handler:    _StripeService_CancelSubscription_Handler,
		},
		{
			MethodName: "VerifySubscriptionValidity",
			Handler:    _StripeService_VerifySubscriptionValidity_Handler,
		},
		{
			MethodName: "HandleWebhook",
			Handler:    _StripeService_HandleWebhook_Handler,
		},
		{
			MethodName: "AddSpendingUnits",
			Handler:    _StripeService_AddSpendingUnits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stripe/v1/stripe_service.proto",
}
