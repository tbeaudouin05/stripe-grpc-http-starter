// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_account.sql

package sqldb

import (
	"context"
	"database/sql"
)

const getSubscriptionIDByUserExternalID = `-- name: GetSubscriptionIDByUserExternalID :one
SELECT stripe_subscription_id
FROM user_account
WHERE user_external_id = $1
`

func (q *Queries) GetSubscriptionIDByUserExternalID(ctx context.Context, userExternalID string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionIDByUserExternalID, userExternalID)
	var stripe_subscription_id sql.NullString
	err := row.Scan(&stripe_subscription_id)
	return stripe_subscription_id, err
}

const getUserAccount = `-- name: GetUserAccount :one
SELECT 
  user_external_id,
  stripe_subscription_id,
  stripe_plan_id,
  stripe_customer_id,
  created_at,
  updated_at
FROM user_account
WHERE user_external_id = $1
`

type GetUserAccountRow struct {
	UserExternalID       string         `json:"user_external_id"`
	StripeSubscriptionID sql.NullString `json:"stripe_subscription_id"`
	StripePlanID         sql.NullString `json:"stripe_plan_id"`
	StripeCustomerID     sql.NullString `json:"stripe_customer_id"`
	CreatedAt            int64          `json:"created_at"`
	UpdatedAt            int64          `json:"updated_at"`
}

func (q *Queries) GetUserAccount(ctx context.Context, userExternalID string) (GetUserAccountRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAccount, userExternalID)
	var i GetUserAccountRow
	err := row.Scan(
		&i.UserExternalID,
		&i.StripeSubscriptionID,
		&i.StripePlanID,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUserAccount = `-- name: UpsertUserAccount :exec
INSERT INTO user_account (
  user_external_id,
  stripe_subscription_id,
  stripe_plan_id,
  stripe_customer_id
) VALUES ($1, $2, $3, $4)
ON CONFLICT (user_external_id) DO UPDATE SET
  stripe_subscription_id = EXCLUDED.stripe_subscription_id,
  stripe_plan_id = EXCLUDED.stripe_plan_id,
  stripe_customer_id = EXCLUDED.stripe_customer_id
`

type UpsertUserAccountParams struct {
	UserExternalID       string         `json:"user_external_id"`
	StripeSubscriptionID sql.NullString `json:"stripe_subscription_id"`
	StripePlanID         sql.NullString `json:"stripe_plan_id"`
	StripeCustomerID     sql.NullString `json:"stripe_customer_id"`
}

func (q *Queries) UpsertUserAccount(ctx context.Context, arg UpsertUserAccountParams) error {
	_, err := q.db.ExecContext(ctx, upsertUserAccount,
		arg.UserExternalID,
		arg.StripeSubscriptionID,
		arg.StripePlanID,
		arg.StripeCustomerID,
	)
	return err
}
