// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: free_credit.sql

package sqldb

import (
	"context"
)

const consumeFreeCredit = `-- name: ConsumeFreeCredit :exec
UPDATE free_credit
SET credit = credit - LEAST(credit, $2)
WHERE user_external_id = $1
`

type ConsumeFreeCreditParams struct {
	UserExternalID string `json:"user_external_id"`
	Credit         int32  `json:"credit"`
}

func (q *Queries) ConsumeFreeCredit(ctx context.Context, arg ConsumeFreeCreditParams) error {
	_, err := q.db.ExecContext(ctx, consumeFreeCredit, arg.UserExternalID, arg.Credit)
	return err
}

const upsertAndGetFreeCredit = `-- name: UpsertAndGetFreeCredit :one
INSERT INTO free_credit (
  user_external_id,
  credit
) VALUES ($1, $2)
ON CONFLICT (user_external_id) DO UPDATE SET user_external_id = EXCLUDED.user_external_id
RETURNING credit
`

type UpsertAndGetFreeCreditParams struct {
	UserExternalID string `json:"user_external_id"`
	Credit         int32  `json:"credit"`
}

func (q *Queries) UpsertAndGetFreeCredit(ctx context.Context, arg UpsertAndGetFreeCreditParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, upsertAndGetFreeCredit, arg.UserExternalID, arg.Credit)
	var credit int32
	err := row.Scan(&credit)
	return credit, err
}
