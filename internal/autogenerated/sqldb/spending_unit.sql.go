// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spending_unit.sql

package sqldb

import (
	"context"
)

const countUnitsBetween = `-- name: CountUnitsBetween :one
SELECT COALESCE(SUM(amount), 0) AS count
FROM spending_unit
WHERE user_external_id = $1
  AND created_at >= $2
  AND created_at <= $3
`

type CountUnitsBetweenParams struct {
	UserExternalID string `json:"user_external_id"`
	CreatedAt      int64  `json:"created_at"`
	CreatedAt_2    int64  `json:"created_at_2"`
}

func (q *Queries) CountUnitsBetween(ctx context.Context, arg CountUnitsBetweenParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, countUnitsBetween, arg.UserExternalID, arg.CreatedAt, arg.CreatedAt_2)
	var count interface{}
	err := row.Scan(&count)
	return count, err
}

const insertSpendingUnit = `-- name: InsertSpendingUnit :one
WITH ins AS (
    INSERT INTO spending_unit (
        external_id,
        user_external_id,
        amount,
        created_at,
        updated_at
    ) VALUES ($1, $2, $3, $4, $4)
    ON CONFLICT (external_id) DO NOTHING
    RETURNING 1::int AS inserted
)
SELECT COALESCE(SUM(inserted), 0) AS inserted FROM ins
`

type InsertSpendingUnitParams struct {
	ExternalID     string `json:"external_id"`
	UserExternalID string `json:"user_external_id"`
	Amount         int32  `json:"amount"`
	CreatedAt      int64  `json:"created_at"`
}

func (q *Queries) InsertSpendingUnit(ctx context.Context, arg InsertSpendingUnitParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, insertSpendingUnit,
		arg.ExternalID,
		arg.UserExternalID,
		arg.Amount,
		arg.CreatedAt,
	)
	var inserted interface{}
	err := row.Scan(&inserted)
	return inserted, err
}
