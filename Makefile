.PHONY: test test-all

# Ensure DB schema is in sync before running tests
test:
	go test -short -p 1 -count=1 ./...

# Run the full test suite, including integration tests
test-all:
	go test -p 1 -count=1 ./...

# --- DB schema and codegen ---
.PHONY: deps prisma-sql sqlc-generate db-generate clean prisma-db-push

# Clean previously generated artifacts
clean:
	rm -rf internal/autogenerated/sqldb
	rm -f sqlc/schema/*.sql
	rm -rf internal/autogenerated/mocks

# Install Node dev deps (Prisma) using pnpm
deps:
	@if ! command -v pnpm >/dev/null 2>&1; then echo "pnpm is required. Install with: corepack enable && corepack prepare pnpm@latest --activate"; exit 1; fi
	pnpm install --silent

# Generate SQL schema from Prisma datamodel into sqlc/schema/
prisma-sql: deps
	mkdir -p sqlc/schema
	pnpm run prisma:validate
	pnpm run prisma:sql

# Run sqlc to generate Go code from SQL
sqlc-generate:
	@if ! command -v sqlc >/dev/null 2>&1; then echo "sqlc is required. Install with: brew install sqlc or follow https://docs.sqlc.dev/en/latest/overview/install.html"; exit 1; fi
	sqlc generate

# Full pipeline: emit SQL from Prisma and generate Go with sqlc
db-generate: clean prisma-sql sqlc-generate

# Push Prisma schema directly to the database pointed by DATABASE_URL
# Usage: make prisma-db-push
# Note: This will alter the target database schema. Ensure DATABASE_URL is set to the intended DB.
prisma-db-push: deps
	# Load .env into the environment so Prisma can read DATABASE_URL
	set -a; [ -f .env ] && . .env; set +a; \
	if [ -z "$$DATABASE_URL" ]; then echo "DATABASE_URL is not set (even after loading .env). Aborting."; exit 1; fi; \
	echo "Pushing Prisma schema to $$DATABASE_URL"; \
	pnpm prisma db push; \
	echo "Applying updated_at triggers"; \
	if ! command -v psql >/dev/null 2>&1; then echo "psql is required to apply triggers. Install Postgres client (e.g., brew install libpq && brew link --force libpq)"; exit 1; fi; \
	psql "$$DATABASE_URL" -v ON_ERROR_STOP=1 -f prisma/sql/updated_at_triggers.sql

# --- Dev tools & mocks ---
.PHONY: tools mocks generate proto-generate proto-deps

# Install developer tools (mockgen)
tools:
	@echo "Installing mockgen..."
	GO111MODULE=on go install github.com/golang/mock/mockgen@latest

# Generate Go mocks for the sqlc Querier interface
mocks: tools
	mkdir -p internal/autogenerated/mocks
	mockgen -source=internal/autogenerated/sqldb/db.go -destination=internal/autogenerated/mocks/sqldb_mock.go -package=mocks

# Ensure buf deps (googleapis, etc.) are pinned in buf.lock
proto-deps:
	@if ! command -v buf >/dev/null 2>&1; then echo "buf is required. Install with: brew install bufbuild/buf/buf"; exit 1; fi
	buf dep update

# Generate protobuf/gRPC code via buf
proto-generate: proto-deps
	@if ! command -v buf >/dev/null 2>&1; then echo "buf is required. Install with: brew install bufbuild/buf/buf"; exit 1; fi
	buf generate

# One-shot: generate all code artifacts (Prisma SQL -> sqlc -> protobuf -> mocks)
generate: db-generate proto-generate mocks

# --- Setup ---
.PHONY: setup
setup:
	bash scripts/setup_macos.sh
